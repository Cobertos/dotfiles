import argparse
import sys
import os
import platform
import subprocess
import logging
from bootstrap.utils import getEnvironmentFilePath, getUserHome
from bootstrap.SymLinkOp import SymLinkOp
from bootstrap.NpmInstallGlobalOp import NpmInstallGlobalOp
from bootstrap.PipInstallGlobalOp import PipInstallGlobalOp
from bootstrap.BootstrapOpRunner import BootstrapLoggingOpRunner
from bootstrap.AptInstallOp import AptInstallOp
from bootstrap.AptKeyOp import AptKeyOp
from bootstrap.AptRepositoryOp import AptRepositoryOp

scriptDir = os.path.abspath(os.path.dirname(sys.argv[0]))
userHome = getUserHome()

def bootstrap(opts):
  global scriptDir, userHome
  #appData = os.environ["APPDATA"]
  env = lambda p: getEnvironmentFilePath(p, opts.environment)

  with BootstrapLoggingOpRunner(opts.verify_only):
    # TODO:
    # AddToPath(f"{scriptDir}/onpath")()

    # Sublime
    AptInstallOp("apt-transport-https")()
    AptKeyOp("https://download.sublimetext.com/sublimehq-pub.gpg")()
    AptRepositoryOp('deb https://download.sublimetext.com/ apt/stable/')()
    AptInstallOp("sublime-text")()
    sublimeConfigPath = f"{userHome}/.config/sublime-text-3/Packages/User" if platform.system() != "Windows" else f"{appData}/Sublime Text 3/Packages/User"
    SymLinkOp(env(f"{os.path.realpath(scriptDir)}/sublime/Packages/User"), sublimeConfigPath)()
    # TODO:
    # Only needed on Windows
    # AddToPath("C:/Program Files/Sublime Text 3")() #Add sublime to path for `subl`

    # Typora
    AptKeyOp("https://typora.io/linux/public-key.asc")()
    AptRepositoryOp('deb https://typora.io/linux ./')()
    AptInstallOp("typora")()

    # Seafile


    # Git
    AptInstallOp("git")()
    SymLinkOp(env(f"{scriptDir}/git/.gitconfig"), f"{userHome}/.gitconfig")()
    SymLinkOp(env(f"{scriptDir}/git/.gitignore"), f"{userHome}/.gitignore")()

    # Bash
    with open(env(f"{scriptDir}/.bashrc"), 'w', encoding="utf-8") as f:
      cobertosRCPath = os.path.abspath(scriptDir).replace("/","/")
      f.write( \
f'''#AUTOGENERATED - Run cli.py to regenerate
source {cobertosRCPath}/cobertos.bashrc
''')
    SymLinkOp(f"{scriptDir}/.bashrc", f"{userHome}/.bashrc")()

    # Npm
    NpmInstallGlobalOp("@vue/cli")()   # CLI tool
    NpmInstallGlobalOp("serverless")() # CLI tool
    NpmInstallGlobalOp("eslint_d")()   # Sublime Text Plugin Dependency
    NpmInstallGlobalOp("js-yaml")()    # Useful tool
    # TODO:
    # Ability to use global packages in require() with NODE_PATH
    # Should work with NVM https://stackoverflow.com/a/49293370/2759427
    # AppendToEnvVar(NpmInstallGlobalOp.npmRoot(), "NODE_PATH")()

    # Python
    #PipInstallGlobalOp("yamllint")()


    # PipInstallGlobal("pyenv-win")("--target", f"{userHome}/.pyenv") #This package is annoying...
    # #From https://github.com/pyenv-win/pyenv-win#finish-the-installation
    # SetEnvVar(f"{userHome}/.pyenv/pyenv-win", "PYENV")()
    # AddToPath("%PYENV%/bin", prepend=True)() #Needs to come before WindowsApps, cause Python is in there by default now?
    # AddToPath("%PYENV%/shims", prepend=True)()
    # #print("Run pyenv rehash to get this to work...")

    # TODO: If apt is running anything, it needs an update first

    #TODO: nvm... requires a curl

    # Misc Packages
    # TODO: Slack
    # TODO: Ripcord
    # TODO: Sublime Merge or Gitk
    # TODO: Seafile
    # TODO: Need a media player
    # - https://discordapp.com/api/download?platform=linux&format=deb
    AptInstallOp("p7zip-full")()
    AptInstallOp("ffmpeg")()
    AptRepositoryOp('ppa:kritalime/ppa')()
    AptKeyOp("https://insomnia.rest/keys/debian-public.key.asc")()
    AptRepositoryOp('deb https://dl.bintray.com/getinsomnia/Insomnia /')()
    AptInstallOp("insomnia")()
    AptInstallOp("krita")()
    AptInstallOp("nmap")()
    AptRepositoryOp('ppa:obsproject/obs-studio')()
    AptInstallOp("obs-studio")()
    AptInstallOp("vlc")()
    AptInstallOp("xclip")()

    #Other
    SymLinkOp(env(f"{scriptDir}/.vuerc"), f"{userHome}/.vuerc")()
    SymLinkOp(env(f"{scriptDir}/.config/yamllint/config"), f"{userHome}/.config/yamllint/config")()

    #Blender
    #TODO

if __name__ == '__main__':
  # Parse all the arguments
  parser = argparse.ArgumentParser(description='Bootstraps dotfiles and my environment :3')
  parser.add_argument('--verify-only', dest='verify_only', action='store_true',
                      help='Only verify the installation, dont actually do anything')
  parser.add_argument('--environment', type=str,
                      help='a string for the environment prefix to use, uses files ending wiith ##[environment] when applicable')
  opts = parser.parse_args(sys.argv[1:])

  logger = logging.getLogger('BootstrapOp')
  logger.setLevel(logging.DEBUG)
  # class CustomFormatter(logging.Formatter):
  #     def format(self, record):
  #         title = record.title if hasattr(record, 'title') else ""
  #         return f'[{record.process}] "{title[:20].ljust(20)}": {record.getMessage()}'
  formatter = logging.Formatter('\n[%(name)20s] %(message)s') #%(levelname)s %(asctime)s - %(name)s - 
  handler = logging.StreamHandler(sys.stdout)
  handler.setFormatter(formatter)
  handler.setLevel(logging.DEBUG)
  logging.getLogger().addHandler(handler)

  bootstrap(opts)

  # Refresh the environment after running if Windows
  if platform.system() == "Windows" and not opts.verify_only:
    #If we don't do this, then the next time we run setup.py we won't see any of the
    #system wide environment variable changes in the same shell
    subprocess.run([f"{scriptDir}/onpath/refreshenv.cmd"]) #Will print out that it's refreshing environment variables